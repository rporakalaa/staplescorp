package Com.Staples.TestngTestCases;



import java.io.IOException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.ChartLocation;
import com.aventstack.extentreports.reporter.configuration.Theme;
import Com.Stapels.ExcelLib.ExcelLib;
import Com.Staples.CommonLib.Baseclass;
import Com.Staples.CommonLib.*;
import Com.Staples.ProjectSpecificLib.ProjectLib;
import Com.Staples.Utilites.screenShot;


public class staplesTestngClasses{
	
	ExtentHtmlReporter htmlReporter;
	ExtentReports extent;
	ExtentTest logger;	
	CommonLibs cLib;
	ProjectLib pLib;
	ExcelLib elib;
	static String actularesult="Login/password combination is invalid.";
	static String expectedresult="Login/password combination is invalid.";
		
@BeforeMethod
public void Login()
	{
	
	    Baseclass.driver.manage().window().maximize();
		cLib=new CommonLibs();
		pLib=new ProjectLib();
		elib=new ExcelLib();
	}
@BeforeTest
public void startReport(){
	

	htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") +"/test-output/STMExtentReport.html");
	extent = new ExtentReports ();
	extent.attachReporter(htmlReporter);
	extent.setSystemInfo("Host Name", "Staples");
	extent.setSystemInfo("Environment", "DEV");
	extent.setSystemInfo("User Name", "Rajendra Porakala");	
	htmlReporter.config().setDocumentTitle("Testng Report");
	htmlReporter.config().setReportName("Staples Suite");
	htmlReporter.config().setTestViewChartLocation(ChartLocation.TOP);
	htmlReporter.config().setTheme(Theme.STANDARD);
	
}
	
@Test(priority=1)
public void staplesLoginwithValidCredentials() throws InvalidFormatException, IOException, InterruptedException
{
	
	logger = extent.createTest("LoginwithValidCredentials");	
	String Username=elib.getExcelData("Testing", 1, 0);
	String Password=elib.getExcelData("Testing", 1, 1);
	pLib.staplesLoginTest(Username, Password);
	logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is staplesLogin", ExtentColor.GREEN));
}

@Test(priority=2)
public void loginTestwithInvalidPassword() throws InvalidFormatException, IOException, InterruptedException
{
	logger = extent.createTest("loginTestwithInvalidPassword");	
	String Username=elib.getExcelData("Testing", 2, 0);
	String Password=elib.getExcelData("Testing", 2, 1);
    pLib.testAuthenticationInvalidPassword(Username, Password);
    
    try
    {
    	Assert.assertEquals(actularesult, expectedresult);
    	logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithInvalidPassword", ExtentColor.GREEN));
    }
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithInvalidPassword", ExtentColor.RED));
        ex.getMessage();
    } 
}
/*@Test(priority=3)
void loginTestwithInvalidUsername() throws InterruptedException, InvalidFormatException, IOException
{
	logger = extent.createTest("loginTestwithInvalidUsername");
	String Username=elib.getExcelData("Testing", 3, 0);
	String Password=elib.getExcelData("Testing", 3, 1);
    pLib.testAuthenticationInvalidUsername(Username, Password);
    try
    {
    	Assert.assertEquals(actularesult, expectedresult);
    logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithInvalidUsername", ExtentColor.GREEN));
    }
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithInvalidUsername", ExtentColor.RED));
        ex.getMessage();
    }
    
    
}
@Test(priority=4)
void loginTestwithBlankCredentials() throws InterruptedException, InvalidFormatException, IOException
{
	logger = extent.createTest("loginTestwithBlankCredentials");
	String Username=elib.getExcelData("Testing", 4, 0);
	String Password=elib.getExcelData("Testing", 4, 1);
    pLib.testAuthenticationInvalidUsername(Username, Password);
    try
    {
    	Assert.assertEquals(actularesult, expectedresult);
    logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithBlankCredentials", ExtentColor.GREEN));
}
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithBlankCredentials", ExtentColor.RED));
        ex.getMessage();
    }    
}
    
@Test(priority=5)
void loginTestwithwithEmptyPasswordField() throws InterruptedException, InvalidFormatException, IOException
{
	logger = extent.createTest("loginTestwithwithEmptyPasswordField");
	String Username=elib.getExcelData("Testing", 5, 0);
	String Password=elib.getExcelData("Testing", 5, 1);
    pLib.testAuthenticationInvalidUsername(Username, Password);
    try
    {
    	Assert.assertEquals(actularesult, expectedresult);
    logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithwithEmptyPasswordField", ExtentColor.GREEN));
}
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithwithEmptyPasswordField", ExtentColor.RED));
        ex.getMessage();
    } 
}
    
    
@Test(priority=6)
void loginTestwithwithEmptyUserNameField() throws InterruptedException, InvalidFormatException, IOException
{
	logger = extent.createTest("loginTestwithwithEmptyUserNameField");
	String Username=elib.getExcelData("Testing", 6, 0);
	String Password=elib.getExcelData("Testing", 6, 1);
    pLib.testAuthenticationInvalidUsername(Username, Password);
    try
    {
    Assert.assertEquals(actularesult, expectedresult);
    logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithwithEmptyUserNameField", ExtentColor.GREEN));
}
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithwithEmptyUserNameField", ExtentColor.RED));
        ex.getMessage();
    } 
}
    
@Test(priority=7)
void loginTestwithwithInvalidCredentials() throws InterruptedException, InvalidFormatException, IOException
{
	logger = extent.createTest("loginTestwithwithInvalidCredentials");
	String Username=elib.getExcelData("Testing", 7, 0);
	String Password=elib.getExcelData("Testing", 7, 1);
    pLib.testAuthenticationInvalidUsername(Username, Password);
    try
    {
    Assert.assertEquals(actularesult, expectedresult);
    logger.log(Status.PASS, MarkupHelper.createLabel("Test Case Passed is loginTestwithwithInvalidCredentials", ExtentColor.GREEN));
}
    catch(AssertionError ex)
    {
    	logger.log(Status.FAIL, MarkupHelper.createLabel("Test Case Failed is loginTestwithwithInvalidCredentials", ExtentColor.RED));
        ex.getMessage();
    } 
} */


@AfterMethod

public void tearDown(ITestResult result)
{
	if(ITestResult.FAILURE==result.getStatus())
	{
		screenShot.captureScreenshot(Baseclass.driver, result.getName());
	}		
}


@AfterTest
public void endReport()

{
	
	extent.flush();
	Baseclass.driver.close();
}

}


 
